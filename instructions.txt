creating react app
1. npx create-react-app my-app -> cd react32 -> npm start
2. npm install create-react-app -> create-react-app my-app -> cd react32 -> npm start
3. cdn links

ep2

json-> to exchange data between multiple systems we use json object(lightweight)
-> Empty all the files before creating the project
->gives error for index.html
-> create html
-> gives error for index.js
-> create index.js

// create "GM" from js and insert into html

traditional js
document.getElementById("id-name").innerHtml =  "GM"

reactjs

ReactDOM.render(What you want to render,Where you want to render);
ReactDOM.render("GM",document.getElementById("id-name"));

episode 3
component is a reusable ui code. Main objective of Componnet is to describe the UI, How to describe UI ?, To return the UI.

Class based components
Writing components in older way like to describe the UI

-> 3 steps to create class based components.
1. class ComponentName{}
2. this class cannot have a return, so we need to have some special super power to use this , and this comes from react. 
-> extend the class from our created class i.e React.Component class

class ComponentName extends React.Component{

// return the UI
} 

3. after the extending of parent class we need to render the Ui with the special method 

class ComponentName extends React.Component{

    // this is already the method we have in our React.Component. We are overriding the method
    render(){

    }
}

// Return the UI from the render method using the Message.jsx Component example